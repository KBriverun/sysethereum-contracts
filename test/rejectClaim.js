// Idea: propose descendants and see if they should get invalidated as well

const utils = require('./utils');
const truffleAssert = require('truffle-assertions');
const SEMI_APPROVED = 3;
const INVALID = 5;

contract('rejectClaim', (accounts) => {
    const owner = accounts[0];
    const submitter = accounts[1];
    const challenger = accounts[2];
    let claimManager;
    let battleManager;
    let superblocks;
    const initParentId = '0x0000000000000000000000000000000000000000000000000000000000000000';
    // 72011 - c9fefc1c94f27cd17dedde3bf41ff65c82fd995958d29b35356c920ee8c4da80
    const superblock0Headers = [
        `04010010d99c9fa4f9cbdb95e48f8a5631629d3a07994703d36085011d2248c3ac834578adeb363d4f531389525ed5e68e233c31d298c21c676b82e6f825b1ee0245614affac315dc01f0b180000000001000000010000000000000000000000000000000000000000000000000000000000000000ffffffff640344f1082cfabe6d6d25adf30201b1f96f28b311bbe85f9de370a84dbb655b916c82189725be271d1810000000f09f909f00124d696e65642062792079616e676b616934360000000000000000000000000000000000000000000000000005001add0000000000000436b2844e000000001976a914c825a1ecf2a6830c4401620c3a16f1995057c2ab88ac00000000000000002f6a24aa21a9eda29799bd19bd8be7febc838cc449664493e49237a9c7545b544f17d88b61159d08000000000000000000000000000000002c6a4c2952534b424c4f434b3ab04da612bb2e9928190b13b103482909d8c3df1e9efffba60369d5206603f48d0000000000000000266a24b9e11b6da6200a3d1eb2852da0b9276112539c5ceb872d3dde8b48e673a30b277b6d958662a24f3c00000000000000000000000000000000000000000000000000000000000000000cd1a68ca78273ffc7e98aa9368c4d9599ddc2dde12f6b078ca82d61ce692bb760c9dfd3ea63115ad179765363a1bd0ae30cf61e4abd85377125edef9223822df5381ae11c498aed32bf372298b3bed6be20d1a79f85433c2f612b697ad2d40e24a3a7f7a8367cd4b34c295da1f3ec5b924e3dbfd12ec1e8f41522aa7791f4e8a36b3757127b8b71456f676a2ae755cc04b093f141f6957bb88a8b1536acfe7a417bb3cffc825f393f400049847365b4255b7bce02b194f02250faf968ae4a6ce8bb8a1eb9d30bd08b0c4703e9c9a5c5997aab9f18b146acaf243234dfa8dc155edd3e78cefcf3162c3a22f44e5d5f656ecf4fe4631b8e5072dd27fe77ac6d5aa07dd21105b2fdbb4767320e86a906b8939e514f8a6fcf7cbf8fd9317552e2823f2371bb91cdf07b55580261b013168a2f0a275853ec2065631b72f0f98cba69a93247685e266fa136d63ef1da5b9c9c0c597223fb16fcc947ecc001755b43e0892ed11474a352724e5743cbcb03e279c4cb6f4fe9a9a9ea30193765e26076ad6400000000043a9feb7a1b3780e29a79bbb39c4182df0270c8091594821ef40d86eb1e1880e43feee5244c18afb612c4846a8bf1b07759fedbdec9d139ade9f4c82736e17fe8515781de95533de686107fd825918e6a24963594a526493c2c13d1c867b4c448322d6803540809b24fedd5a22184e7d794a7f20ccaced792a330bbdbadd258570e000000000000207f19065bbf8718c86acbe757b97145e0f59c5b1247a209000000000000000000fcf32a11f2f3a929b210b09bbc56ae7dda25fb8904419a9a018009728b6a082f09ad315d9b0d1f17bde42646`
    ];
    // 72012 - 618ca33ded8c521154d4f601f1b0cdddf359ae391731970e2cc53b382a1fd008
    const superblock1Headers = [
        `0401001080dac4e80e926c35359bd2585999fd825cf61ff43bdeed7dd17cf2941cfcfec974632e55107fbbc9c36c287bb0ed1ad98708afe12a5061ec02df5b90872897601aad315dc01f0b180000000001000000010000000000000000000000000000000000000000000000000000000000000000ffffffff640344f1082cfabe6d6d951002e2909fa0904cdd395c577ab75fee7443feab09df7f438ee1955ac5ce8b10000000f09f909f000f4d696e65642062792070676b63776200000000000000000000000000000000000000000000000000000000050026420d0000000000046a2eb34e000000001976a914c825a1ecf2a6830c4401620c3a16f1995057c2ab88ac00000000000000002f6a24aa21a9edf6364f812ba2583933fecce69300fc81217c539a61ea642773885321ef2cc98b08000000000000000000000000000000002c6a4c2952534b424c4f434b3a4a4f8ea142cdc503335ee8e1e6ec1d0b81e07c46d652aba0094b41e09f42794a0000000000000000266a24b9e11b6d70770dc4c6bc9bba09b700d787d686c267f040eb0983182bcf03238825a47b3a2facba3900000000000000000000000000000000000000000000000000000000000000000cd1a68ca78273ffc7e98aa9368c4d9599ddc2dde12f6b078ca82d61ce692bb760c9dfd3ea63115ad179765363a1bd0ae30cf61e4abd85377125edef9223822df5381ae11c498aed32bf372298b3bed6be20d1a79f85433c2f612b697ad2d40e248a280552823b27d24f7b60516036bf712d878609fc504eb455f91f837ce0eca6aef759bcf1856c48482371c305714996b90c423e962c718b2c6dfd0ba3470144426d8ed9550ea886f4d7324e21605324a12317dba517b2c257123e9010a0bab2926c928c20df1a4b075396d2e72b9ca00d2b18bd389e6d7b42cb2a1cf801602dcea7b419ff62464960c3c8c73922223ac4c387493b710b42de9aa54044a7bb6c0f233043280ccf68aeb9a37e0ca6d9fded14d6e795656f5036dddf6a136b9fe4ea6e65ad3e3faaa63a6b57e4e20c38defe56430d47262cf4617091c87bb74f40c1fb516b760c1e18f9664ae5b13a540d88f7f885c655e153ec6da03e5c61eb1eb10b82afb5ad888eae96e49fa2094cdb9caa4443765193ffbe8d3e426c3e282900000000044ee2b80b09af68ec548bc8a28ad488b9d370d28bd291bc628eefc6e363beef583feee5244c18afb612c4846a8bf1b07759fedbdec9d139ade9f4c82736e17fe8515781de95533de686107fd825918e6a24963594a526493c2c13d1c867b4c4485bfcb163e4fc810f7598a45a56abcc1d5224fe067c2ace6b5d5aaccbcc63cf450e000000000000207f19065bbf8718c86acbe757b97145e0f59c5b1247a209000000000000000000aa060b4585f1e2aa8f76ba5fc8165c6a025019a6729d11411ea9c8558f17a71932ad315d9b0d1f1744302c60`,
        `0401001008d01f2a383bc52c0e97311739ae59f3ddcdb0f101f6d45411528ced3da38c6195e875c49863de85d4e691da606d86df06a386aa52803f90befa0a9219d7a46355ad315dc01f0b180000000001000000010000000000000000000000000000000000000000000000000000000000000000ffffffff640344f1082cfabe6d6df0a19e16be2628501276729ae33aecf4084ac2aae5d6c1e01d68498dae7fc8a110000000f09f909f000e4d696e656420627920626a78313000000000000000000000000000000000000000000000000000000000000500fcf9000000000000048c667d4f000000001976a914c825a1ecf2a6830c4401620c3a16f1995057c2ab88ac00000000000000002f6a24aa21a9ed6e28b1a33655aa0ae74419ed64583d6f23dbe13b99cbe66f236e89f29c2456bb08000000000000000000000000000000002c6a4c2952534b424c4f434b3a132f3fb93c65e2809f6a0ac09ac684735a98c272da0f3012f7b50e3b8172b6830000000000000000266a24b9e11b6d3e63017631a703f3bf404d17beb2feafe860f4abc3d574290f9ab6e0fd783c90b70ffc3900000000000000000000000000000000000000000000000000000000000000000bd1a68ca78273ffc7e98aa9368c4d9599ddc2dde12f6b078ca82d61ce692bb760468d7d80c667501ed9f0dfd9008c9ef56c8585df4d7cd85cc911b394389a0c1eee85a2ec021331864e68f7d5fec4ee48f4416db28124b0d1425ebe015e803579b484dee8221ae456e81540772437a51f1a90abd754e1b7a6901223513b09c520d1c069e83c22c0c184e3f77b2a705c7fa3625cff3b5493bfa626884cbe546c05e73f201e6d6c93a8aa42e97eecb5212227a94d56afea4d89c0523c558ead2e1bb5293ab6e5abf1659346ff8bc4ce6fbce9ae1ee3cccb4f66d9e9da40ea9cbecbc0e4b2626d3ae308f6a0fe3f6d6e1479c96c1109126967e234dfb9f60681144f87a55b873a69840f34194ef9007ef1cd50fcf74ca1fd01f6865599c804af48ff9f2d1e96df41e9a97186b726cc15b0fb38174a4785c106bdbec41c2cdf77260397a48fb2c189eb7c34dc3248256649e2bddd1d7ccdcaf257af68cf3124161daa000000000464b3d2de3beecdc3fbcf744048913c63d5b594b55517060b1b66404b4eb1a7573feee5244c18afb612c4846a8bf1b07759fedbdec9d139ade9f4c82736e17fe8515781de95533de686107fd825918e6a24963594a526493c2c13d1c867b4c448b0a4f5bd78b48fa8b6b79d8a2ee4c1dc4a9facebf9e711aae987df52b2c443db0e000000000000207f19065bbf8718c86acbe757b97145e0f59c5b1247a209000000000000000000dd5af1177e7c5fe75c34f32a12acc7a8b0480586039f0e83abb639e7dd5b6389ccad315d9b0d1f171dbf86b5`,
        `040100103e7c264b7713b9504f59ece3483a0a5707875f505f9c38a19a24236a1ade482723ca45eb19d56fb11c1c2f3e5bb07d1eb0b50471c9e5886dfb8d8c0a9365386818ae315dc01f0b180000000001000000010000000000000000000000000000000000000000000000000000000000000000ffffffff640344f1082cfabe6d6dfb81e1da66bb54ad0e224197c2373dc2d7f7d1b4cea4b9c46bc58e682bc4aa2110000000f09f909f00114d696e656420627920616e696d6572726f00000000000000000000000000000000000000000000000000000500fdb0aa6a0000000004d4aeb34f000000001976a914c825a1ecf2a6830c4401620c3a16f1995057c2ab88ac00000000000000002f6a24aa21a9ed81c4330de86cd043c232c5f60490b76d1ab7ee18baf4068182386a2565d1235c08000000000000000000000000000000002c6a4c2952534b424c4f434b3ab0c0c9b953c243ff50bc1115965966ff8a5b2aabdf20e4e5f237607e4fa6d7100000000000000000266a24b9e11b6dc4b8ba9e5a2d61144dd920f5c0f969b736c3911529cbcd196fda018290b9357347f9d64200000000000000000000000000000000000000000000000000000000000000000cd1a68ca78273ffc7e98aa9368c4d9599ddc2dde12f6b078ca82d61ce692bb760468d7d80c667501ed9f0dfd9008c9ef56c8585df4d7cd85cc911b394389a0c1eee85a2ec021331864e68f7d5fec4ee48f4416db28124b0d1425ebe015e803579b484dee8221ae456e81540772437a51f1a90abd754e1b7a6901223513b09c52098a25440830aaf4819a7565ebec6bf1f2245021c15373387ae872a3fd224898e61e668cc9526c0210ae47b61a3e80f6c95799bff07d431c21bba92c50765a5398906337f47d4a2d562cb479fb48833b71693c369d5038d511eafca649dfbc759b7475b52c0d835e58caad2a7940c20ca0d2be865b5e6f7e5b99d38a2c66020169f97cc5b8591e24b0eaf307c45923b22f371052f036479f873ac91f8c69ca0d93a244957a50707994724cd8c4525eeda36319aa650761807760d8f44ee9c03e26e177741e2002f00fa84736ff15b0cb97dc3b4ab0d94ee3e8955a2a3886dee59025c6bdbc85c4cf108031b157c43f08db6962285205e2fe8ece931392df864a000000000043f8d09eb2ac8f1200eb1431dd8da00d4fd054ec27ec3faffafe5c14297fd91dc3feee5244c18afb612c4846a8bf1b07759fedbdec9d139ade9f4c82736e17fe8515781de95533de686107fd825918e6a24963594a526493c2c13d1c867b4c44861d03e14ec983ecc5d0a734122a98ce6d492911b0514ba452742722ed4303c370e000000000000207f19065bbf8718c86acbe757b97145e0f59c5b1247a209000000000000000000a5c96ab1053ab674d4d60fc712f169c30d0645acdee5c4f1c7afce7ca91f198c23ae315d9b0d1f17e20ec934`
    ];
    // 72015 - ad7df38a519964a611037cf4dff63d0de36e61504bdc70a7e38bd733a7dfdaa4
    const superblock2Headers = [
        `040100105cc506cb16fe97897fe85851afdabda91c5d76215ab86999bfd55392a0e31dcdd92e0375fe3fc6910376ca1f9ce316897789e3a8ad3193be41170dd02b19451421ae315dc01f0b180000000001000000010000000000000000000000000000000000000000000000000000000000000000ffffffff640344f1082cfabe6d6d3351e9ba9425ca74927436adef6fa0856e1bc37fb0231eb9e8da6a3d9ac8d59110000000f09f909f00104d696e6564206279206c69736974696500000000000000000000000000000000000000000000000000000005009fb9000000000000048f4bc14f000000001976a914c825a1ecf2a6830c4401620c3a16f1995057c2ab88ac00000000000000002f6a24aa21a9ed7c4dd68200b5b07b216bd95dd23ac9c3715715ecc708a79b4b21dfb7e9712a0a08000000000000000000000000000000002c6a4c2952534b424c4f434b3acf820f2ffefa21a7e92829519b7826d250c49833c39ccd260e6bb8d2ac7dfb820000000000000000266a24b9e11b6db3e0b6d0fae7e3ed0a31aa98ad6b132143769ab10aad297785a0d5320cc3f92862cfe43900000000000000000000000000000000000000000000000000000000000000000cd1a68ca78273ffc7e98aa9368c4d9599ddc2dde12f6b078ca82d61ce692bb760468d7d80c667501ed9f0dfd9008c9ef56c8585df4d7cd85cc911b394389a0c1ea1a730344f2c82d4768623fbc29b1c71ff631a7ac0390b8ed26484b702e5b25dd4046a15a01ce2d0a8b36e3b3e11fffa8ea7bf2e30f6d34d0ca9731c99742ef435adfc2b11900ac4cab0516d1b1f68399088d62cf07b76414426002dada12ad6c70c1c396016e89dad80513d9034a32654e8ac4d91c8bd3cb8a759a11022fcb1673772151c1a35064f04d440b31caf1bef2d00d132afd4a1c1d7d1d41eb777f08e26b0345fdbaaf63e0ebbc7910d432c5782b6ed6671e0d6c6ff5d85c4f4e4171796b9f06befb60ee48b2a722e71d5a01883de427d1a3f1864ca662746fbec8b9406b55c702ea53bb066e02d91269f5bcce01597c5f6e3579699948c4a1d59fecf56c27fa43862d330e900ddd5eb8f7a1669ba6bd1a5b6f8ec4219a757d9de3b9148273203f7aa9d1124eb39183c99807f6db8417eb023274b8468a290eb02070000000004988be8d4801cb9d72b960bcf2ba4bead847d39f0af5a255b8cd34d57628a637b3feee5244c18afb612c4846a8bf1b07759fedbdec9d139ade9f4c82736e17fe8515781de95533de686107fd825918e6a24963594a526493c2c13d1c867b4c448abeeadebf97fd53e2d48e83d3e130b493c71c666249529ed78d35bd91860a1430e000000000080207f19065bbf8718c86acbe757b97145e0f59c5b1247a20900000000000000000044ab7870d832bef9538b8cc12617e4adf3bd8b12b04fb3da6ce39b5e0867885067ae315d9b0d1f1769763473`,
        `04010010a4dadfa733d78be3a770dc4b50616ee30d3df6dff47c0311a66499518af37dad877ff8d5239afbfd0468433c38e785d007c600da84952651d098addb41cc72ce7dae315dc01f0b180000000001000000010000000000000000000000000000000000000000000000000000000000000000ffffffff47037d08090499ae315d08fabe6d6d071c56e2040d07c3dd7666d217fcbc87c3e8a9343d7892d2d15b67f1dc94579d8000000000000000061761fdb766000008356166386532393300000000017b4b844a000000001976a914038b1e7f506cfd3bd70619d2c3d4ba1964c4c6ec88ac000000000000000000000000000000000000000000000000000000000000000000000000094db5ac3ebf9675d97f5c5a0f6515958e908e1d3c5809edccdd08359da8ac19006b7ff589e6da9c676ba3ee3c69a9ed9ffa00874ff00fc2e5dbee9f76a013e12048ddc1e7a9b217e511b9695468de89b5b4b790e0d45cad9a17f59a6570d537520a5a551b18500d2dfaf6c9ec31bf57fe5b1a26f8fde80ec994e77228f2d4d7bef81fdb333ee326530c989c2c45564870dfcca80766d5bc312f9b5d2591a273935145cafcd6c9f09b2ab6dd8b0f55eb843d4e49ef51bb495e328ddaa7483bf41db497c019a82c8a2f5c3dd61fd0f5c0770eb6e67ceca20144458607f520b9713143bfc3ecf2c09924a461b7b617a2527f8cee5a4ea7c38474f40a8798bbb4291e208d67038de903874fe0653d5ecda0f824ec784ce94a4d262a8bcdc0f0a4fecc00000000070000000000000000000000000000000000000000000000000000000000000000e2f61c3f71d1defd3fa999dfa36953755c690689799962b48bebd836974e8cf97d24db2bfa41474bfb2f877d688fac5faa5e10a2808cf9de307370b93352e54894857d3e08918f70395d9206410fbfa942f1a889aa5ab8188ec33c2f6e207dc7302466592be5f38570babf3b224ba0081e1fe7f1eec8c0c0ab444746bcdb66f5b823deb9da15bfcb6c4514ae46ed98f9d7463190b65aaded75c5725d96ec7c08890bf7d335cd3f7917a889add3473e7819a90506aa5cf149712f5cac4e1c53847e000000000000205cb54355edf6ada9e0c37b9934024a8fb9b19bc0be1cbb020000000000000000c009a27ce3fa6a3af4b599a39a51fd739f9085326d134131804804824f31b20099ae315dcce50318c89e25a7`,
        `04010010d89d8b72a041d73a2e0553856820fa47fdc7f761e0ebc8f248908366587c65a9b52a31f7fb3bb3a73167a32d5a32bfca856b140bbbd2d570bb17a5d0cd8c0c4ea5ae315dc01f0b180000000001000000010000000000000000000000000000000000000000000000000000000000000000ffffffff5b0344f108182f5669614254432f4d696e656420627920686c6f6e65312f2cfabe6d6dea01cfd110b2df71a0d65d3579f72973cc5bbd5175b9e366711d8a6282066a2b1000000000000000105f6fe70cf5b86497e6c61c6759300100ffffffff02b0a5cb4f000000001976a914536ffa992491508dca0354e52f32a3a7a679a53a88ac0000000000000000266a24aa21a9ed862f1b90c43ebd3633ea82e47930a6448dd91366dff9651683bf9b763c1bdb030000000000000000000000000000000000000000000000000000000000000000000000000c6ff9fa8b17ae305bd8ace6cedac837ff412c5d6d2fa38355ff7aaef3f8d72835aa7b91b7de9e02e2b061bccf9e2062b57aac2179f3b947bad8397d4ed47fde88669718c24e07a246b600489f65a409951aacf0c06c360ae96926ba76915fc231c789208e764e8eb42fa47e87fc0daea5f029ec97a31a9f31b050b9bf25c58253a95b5def45520e02425816c820d25ba427f019f42beaadcda7bbc9abdceb400b7bed931eb12d8407632e00d91dcdc207d6fbc0b4c233a3b3189c83763f00ecff6b64a60b9958039265292009f4765c2cb9dda384c901b017aa8027612b0e6fa42dcc5f552d0fe2dc3c787fb54970d6b50df035f5680745b5af65693cc672a4dfa0c384b9f3adb9f4b503fca8ac8f510ad4754733f4ba604d402c59c2f222ba2c0e438f294c643baf8f278ac747a8712bb35f44b9c0d0b5781bb249f7ba5108b0119a1de35273805fb05805026c7cdd67d7f6638dfcf269931ffc1e5c295099d35540f15914215c217607b01b622fc71a49eaf49f0b24924c4d91281015badb5900000000040000000000000000000000000000000000000000000000000000000000000000e2f61c3f71d1defd3fa999dfa36953755c690689799962b48bebd836974e8cf9c3dcde88703949e47cee7a52631edcaa04264d39cc98806a1cd33757a53c90ef475111e209381915778e30a9541cddfda737d099a8f112daffec4220bc558c2a0e000000000000207f19065bbf8718c86acbe757b97145e0f59c5b1247a209000000000000000000b32b61f80769c9a23c9e714b0780fd5890ef04d9c3eba84c1df9a58fd698ede7e5ae315d9b0d1f17df740342`
    ];
    // 72018 - 034b9b42c05f155160a1521f493f096eec3317049abb0c60a0af85a9b1f43ea2
    const superblock3Headers = [
        `0401001082031d95000202b19935773a1724c19d4c62bcb6070b0aab43c2ad5964389c847006e57926e492e7b6cea4445f21c145988b426126f6eefe3825e508cccc1dabf8ae315dc01f0b180000000001000000010000000000000000000000000000000000000000000000000000000000000000ffffffff5a0344f108172f5669614254432f4d696e65642062792078696538382f2cfabe6d6dcee71f7db8dc75fcec99f61d3239f36e48b6a1d8092a524a402ed9323776423d100000000000000010606f4f042db196e2045444efbaaaaaeaffffffff0239e5cd4f000000001976a914536ffa992491508dca0354e52f32a3a7a679a53a88ac0000000000000000266a24aa21a9eddd0b63fb23566285b2b827a0102377277c2507ab8e14d5b84bdded1ac3eea7300000000000000000000000000000000000000000000000000000000000000000000000000c6ff9fa8b17ae305bd8ace6cedac837ff412c5d6d2fa38355ff7aaef3f8d72835aa7b91b7de9e02e2b061bccf9e2062b57aac2179f3b947bad8397d4ed47fde88669718c24e07a246b600489f65a409951aacf0c06c360ae96926ba76915fc231c789208e764e8eb42fa47e87fc0daea5f029ec97a31a9f31b050b9bf25c58253a95b5def45520e02425816c820d25ba427f019f42beaadcda7bbc9abdceb400b7bed931eb12d8407632e00d91dcdc207d6fbc0b4c233a3b3189c83763f00ecff6b64a60b9958039265292009f4765c2cb9dda384c901b017aa8027612b0e6fa45780a49229ed93251acae860e5ecb1a88b7369cfcf23f3d059e3eb92d560db0194bf3c607d3e81cc13fd25f0f3991545b90e01975f452677025b16373d4d56fae29af22d3d689f6902b0b25507d7741e05fc15c773358b7092904345d057de0e2870bce4b466772131395a4f96887f79d169967ebefe6c8edf5768b7614cdefdac4dffe134a08d62bce74fce2851c26e431a932a73a99cbfe11a21cbd793235000000000040000000000000000000000000000000000000000000000000000000000000000e2f61c3f71d1defd3fa999dfa36953755c690689799962b48bebd836974e8cf9c3dcde88703949e47cee7a52631edcaa04264d39cc98806a1cd33757a53c90ef475111e209381915778e30a9541cddfda737d099a8f112daffec4220bc558c2a0e000000000000207f19065bbf8718c86acbe757b97145e0f59c5b1247a20900000000000000000092881b1d6df4ee442785b5bb07e6e29cc17d0f54c2693f6eff125add3bcedb2008af315d9b0d1f17655a3fd2`,
        `04010010a23ef4b1a985afa0600cbb9a041733ec6e093f491f52a16051155fc0429b4b03fb50c7999b17ee72c50864575f247ac5e74157ccaadcc3a8bc995b9bc445ce45ffae315dc01f0b180000000001000000010000000000000000000000000000000000000000000000000000000000000000ffffffff640344f1082cfabe6d6d3f036168628440415c6405c9013b072718fe7c50b938666f84b1ec58d8f4534010000000f09f909f00144d696e65642062792066616e67686169303030310000000000000000000000000000000000000000000000050061f90000000000000455dae14f000000001976a914c825a1ecf2a6830c4401620c3a16f1995057c2ab88ac00000000000000002f6a24aa21a9edd83208019755603799c09b574e3cde148f0e894450b5dc0e93bcc64a65936c5808000000000000000000000000000000002c6a4c2952534b424c4f434b3aa1147e389a9b0691857819c6412dea10c852652868b42ac803cd284facd5087f0000000000000000266a24b9e11b6d753523536aa964a5679234eff5368fa276a17d294cc46d2ea14f04ea69124b49ef68ee3b00000000000000000000000000000000000000000000000000000000000000000cd1a68ca78273ffc7e98aa9368c4d9599ddc2dde12f6b078ca82d61ce692bb760452eb3e6a56bee521abfe434fe9fd6a1368f841dd50a8f12ff5d9767f404a8a4c1c4fe06186b57365d5a3005184da697e4f952f31d489640427fc36b053a4de0e82989fac6dd6cb79211c7c40cbd7c80f3332304bf333bb2fac788565bc32ad4d0b2663eadf2f5568c238502594b4b1151132d38fdb65ad2e1856525d1c415c690418c18da8224dd7a45690ccfe2a346d876aad0f8982197e5003136f24b732d1d651ad1e49be91234366372575027a1e594339d7343dc7c2d9dd7a08bd7df15ce87bb32cf8c6dab8332b094c58bc9ad676821f811e17da83ab22620574ca6b640a6294d58cf0705fea895898ae18160d2c381f03fea2ac7ea3e4dae6f7aea7245b37727b72c0737aede93b62b79fa9c7ac1a954c2def65c07d50e428293d6e308f8d853f7cf33dcd757f937435e7ec57c23bbad5004be5b35f09eed8f3b1204ba02852da32759d9d264f935d8006b6bf843f460f99a53255a48b419df922acf000000000483bf9739fbf32509d107dea9aca835b8c2cddee9c39d1af340d3fc47b7459ba93feee5244c18afb612c4846a8bf1b07759fedbdec9d139ade9f4c82736e17fe8b1af387fe915e196c5705c9f62cf9b93fc13b6ddda0eae3b02e54f1d42d3836a4d2de7f8f23cbc32246da99c431ba7cd3b299bfb17b82ccca41121f7b345bcd90e000000000040207f19065bbf8718c86acbe757b97145e0f59c5b1247a2090000000000000000004f2275f873d6e041e30e402c53cb6f121b95651fd92a628d955a1f52f46c9f8d03af315d9b0d1f17cd395759`,
        `0401001038557cf24d26c88216b099d9331d2b7bd668bc5e9b72e6e593f0c943866c3fac6336407e4456c237105b8c5d1ac545c8af1e746ab16ecfc79112e5a4e3148d151eaf315dc01f0b180000000001000000010000000000000000000000000000000000000000000000000000000000000000ffffffff640344f1082cfabe6d6ddf48cdf527026fae44af862cb9a121f433fd7cc0e0f0b6a6d41e0ff57d38947c10000000f09f909f00154d696e6564206279206d756c696368656e6768616e00000000000000000000000000000000000000000000050039d000000000000004b5cae84f000000001976a914c825a1ecf2a6830c4401620c3a16f1995057c2ab88ac00000000000000002f6a24aa21a9ed73d744fb534732bb0fe5dbe616172d31f14453e85e4c8c2c3734d7cf0f7fa0f608000000000000000000000000000000002c6a4c2952534b424c4f434b3a8466984647813e11eb04bffd730a39a25b93a539774292293e83e866450bdaf00000000000000000266a24b9e11b6d3155a28fba01cdcf73bfc5dd335d0923e0463472cb696a57eb9a0f3aa09a99ed234fba3900000000000000000000000000000000000000000000000000000000000000000cd1a68ca78273ffc7e98aa9368c4d9599ddc2dde12f6b078ca82d61ce692bb760452eb3e6a56bee521abfe434fe9fd6a1368f841dd50a8f12ff5d9767f404a8a4c1c4fe06186b57365d5a3005184da697e4f952f31d489640427fc36b053a4de03d90c542b9999a40bac366ec705bc759a7bde6ea2b30325b464329be8cd786a2eeb260d582ad10e3757f3f258ce3120792602d5c95e6a5bcefaefafd8d08b964975457c14fd2f92990448cab42e7835b8750ab6c8e4775dc136d11305b20bcd16035afd9521bad763a7300019768e57220d6ce79f9ae394877d62345f6f444ef983542007fe74544e389283432432faad4b91245ecb111e0a8e1b6d14e0a63b3ca83cdfcff7e0e6df4f4c1798acea66c8c63d9bb21575c41d0158d0a38bd10c95bf21af4f985f176e79821f4993f586fdd09018e32854066c1fa5fe57f46e0b34497bb786f4ea2d66c2728c66494c280cb49200b23e982da34a201291e24e7a52d8cb0a25307d391710d4de7db9a91d542f261950c90805007772baea477a39b000000000456a51d075162a6ce3fe381dacc30ce01ca144f8d0d6814ddba7d4fb0014510a13feee5244c18afb612c4846a8bf1b07759fedbdec9d139ade9f4c82736e17fe8b1af387fe915e196c5705c9f62cf9b93fc13b6ddda0eae3b02e54f1d42d3836a2292131d9e4cf80242fc96b59e6b78b303fb42acec3773510ff4e629137e19090e000000000000207f19065bbf8718c86acbe757b97145e0f59c5b1247a2090000000000000000005fa6963f1e586cba900e63b35a53e27e257cabb06016c8298ca5296364f8217426af315d9b0d1f1763006ac6`
    ];
    // 72021 - 6b9bb08b6513d939c95f8ca8dd1a217da516d4053415b55831ad4343c8f70cf4
    const superblock4Headers = [
        `0401001000ac0d139f95a19d277d3bd9b955cd082f45d229683f9e89ae352e3cbf8a496385c4f7813b28245dd3226d4538bffa8b3fd8d01a6941508d9733763181dcee9d36af315dc01f0b180000000001000000010000000000000000000000000000000000000000000000000000000000000000ffffffff640344f1082cfabe6d6dd8afc877f4217e0c487d77022fe966ff926171c7c0529a26ffbe880399e3c2d710000000f09f909f00124d696e656420627920646272616d616c686f000000000000000000000000000000000000000000000000000500ced401000000000004fc82f64f000000001976a914c825a1ecf2a6830c4401620c3a16f1995057c2ab88ac00000000000000002f6a24aa21a9ed2378034b0809c0a760268d182b5429664bde0ced34d9108a39550bc17d35af0408000000000000000000000000000000002c6a4c2952534b424c4f434b3a3c85914a97e5f5e91fde182e2b93bbf0e0fd107652ae2d5fdbd633cb3c3134c80000000000000000266a24b9e11b6d9025ae94102fb1bfdd6edc80d439b002d5388ca64ed0cab06e8e13e7482081881a91663a00000000000000000000000000000000000000000000000000000000000000000cd1a68ca78273ffc7e98aa9368c4d9599ddc2dde12f6b078ca82d61ce692bb760452eb3e6a56bee521abfe434fe9fd6a1368f841dd50a8f12ff5d9767f404a8a4c1c4fe06186b57365d5a3005184da697e4f952f31d489640427fc36b053a4de03d90c542b9999a40bac366ec705bc759a7bde6ea2b30325b464329be8cd786a2eeb260d582ad10e3757f3f258ce3120792602d5c95e6a5bcefaefafd8d08b9646160f86c4b4903238193c937f4520fef3cbee562b68b8872c886397481e4f2cfd5f163775732c15e232d216346e7cd19de1d3eb9547fc75a5256651b7680dc14a1c38cfd767a7fc6acbf4f78c50632d5df19e5638130388f1ef29c84e67b45d5c5a8e87653189b70a3e62b9ebda2dc3c391547de814f8e9449191989f855fbdbbaef50f5c98d98764f2391fbdfd78f22ea481c9030d428e28dac76dfccbfb61eea9330f510f53b2ac6a39cc9a6163bb30d131a91d0468e16a0cdf641017c60635fead589d34fa8f5b3ddec132471fe549e725778b24ce5537e4f1b880fa5b3210000000004f41ccabbea8b57d4b440ce70a217a6feb79f3011c9cdc3ff7a198b525760c6a33feee5244c18afb612c4846a8bf1b07759fedbdec9d139ade9f4c82736e17fe8b1af387fe915e196c5705c9f62cf9b93fc13b6ddda0eae3b02e54f1d42d3836a72957b78beeccb4a93aa2bd5bc0a767419ded3ea31880d1a91d20866642070b10e0000000000c0207f19065bbf8718c86acbe757b97145e0f59c5b1247a209000000000000000000c3017ff8220a13f12111b7b62174fc96a8e2d3c5e02f41e50daffe996d4a360d7baf315d9b0d1f1754e09021`,
        `04010010f40cf7c84343ad3158b5153405d416a57d211adda88c5fc939d913658bb09b6b3e86f80d9d73bed5418f9f472ba9d362eeea59026ce9fd9670b0bdd0ccd5e345cbaf315dc01f0b180000000001000000010000000000000000000000000000000000000000000000000000000000000000ffffffff5a0344f108172f5669614254432f4d696e65642062792034636f6e742f2cfabe6d6d51bfb396b15a3a33a6ae2ee46666acac36512bd2679a8548cff4eec59ccce83e1000000000000000100f70d717102e37cd14dd46444a140000ffffffff02fb711c50000000001976a914536ffa992491508dca0354e52f32a3a7a679a53a88ac0000000000000000266a24aa21a9ed7a11b47a21612cc7581de2bddc459373aab067f9e28b55443225f60a1ed450170000000000000000000000000000000000000000000000000000000000000000000000000c6ff9fa8b17ae305bd8ace6cedac837ff412c5d6d2fa38355ff7aaef3f8d72835aa7b91b7de9e02e2b061bccf9e2062b57aac2179f3b947bad8397d4ed47fde88669718c24e07a246b600489f65a409951aacf0c06c360ae96926ba76915fc231c789208e764e8eb42fa47e87fc0daea5f029ec97a31a9f31b050b9bf25c58253a95b5def45520e02425816c820d25ba427f019f42beaadcda7bbc9abdceb400b021b89a56a3bfffa5be5ffa8e640bf2a4d20578f1f1ad5b47071e0cfcb560ee3ff7d0c8c4856a1e9960bd91d25034976ec607ae1abafd9066980089078781ac620cc714bca5a6cd0536f2c6ab12e8abb29f9881f00d199c9455ce1c10c739f77625cf1e45e26db64ab234752a9637c9708db9a0820370bf0f0f141c5e3aa85d6176268e804e914f02d0ea6694a4e02c143c6a2be863f56273186b4b871b3c8af19df80d097fd75db26cd485d7a618e133c6a2af67d30de3c2b7a72d8f84e0cc950ef44701450e7a089d77a863303ca26459b94399446369b5852640ad1ba76dc00000000040000000000000000000000000000000000000000000000000000000000000000e2f61c3f71d1defd3fa999dfa36953755c690689799962b48bebd836974e8cf976391884f73d602a768690efe3aab4871c18961e2c62e1bc93fc53f67f1183c7c87e170ca3bb9cd068ee5e2476ccd8ef0affca5b0e4272a5c94a8383a8e6f0230e000000000000207f19065bbf8718c86acbe757b97145e0f59c5b1247a209000000000000000000b07bfaf312eff460ed52f374e711e747efa82c3b3c67daae4f8275fad8e05610feaf315d9b0d1f17d5337753`,
        `0401001070d0fbec94705a8cea5c439f214e87f214a5ad1256363bb14f679ce7c77d881cceecc1ee7c98717db41f310420a66b404278e7b0297b6e447f42801d274e459001b0315dc01f0b180000000001000000010000000000000000000000000000000000000000000000000000000000000000ffffffff640344f1082cfabe6d6d0b424af837b9d5d86118e7429009262712041c8b17291ccf767e27338d58432b10000000f09f909f00114d696e656420627920787977616e353538000000000000000000000000000000000000000000000000000005000b0c00e00000000004427f3650000000001976a914c825a1ecf2a6830c4401620c3a16f1995057c2ab88ac00000000000000002f6a24aa21a9edfd0fbea62276d5994d1793087144b0c13c146d0442e06b7878e758062421160308000000000000000000000000000000002c6a4c2952534b424c4f434b3a813dfd99086460659eaf8457b2a07f895b62709ea4d1fd0fa61e13ac37853b610000000000000000266a24b9e11b6de782cc56fa50ce195cc9f95bcf69416150698a4002b36cb0697bc90bfe7f8aa40e0e374100000000000000000000000000000000000000000000000000000000000000000c576ae4b594e2a5590fc2da60350aac30db71a69a90c36e0b3bd386047d40caecf0d832f574ebcaf551f92fa3260bc4571eb4c46869392ee5b22503f5364253a4de6ddcaee8b578fd9911ce173d2e6e9bff318361da15475593ac2b197da08106abd6587035f447d935ff5b59d418d9770afeb650f8adcc9a465340fe8c80989d4309182a36de76a92564aee5a803f1abe2bab0cfdd75a7b79852417bd03c54f5ee714da066c2d3cdead9d31b8ca28ef70e9aab59420876f85fe92c7bd0c3b1b177f2ed76e3bb3d49c65bb81f992a26ba3d1d24c4e62e7a51015c9f439d52f9fdf9ad18392b9d6277fb8f0861b40ef2490ca1b02c95e432f2bdae57d60b12274c5dc0a019e3279f5d251f02487c791103cc0eebbea5c164e297d08462634ddfe98f466462b0807747620f8cd6ade4b8a8311f1de810d64f082ea79d051a012578654531cd6dd5dac9aeba2b1b049fc6f7227b5011cf749872ab4bf0a68c0a220139051e0f070272f9213ca4705a6a4fcac750ab7ca5ef8fadcb7e40adcbc656380000000004121d1fce0d9b797a235ab28b21bef6a08216bc64e76c7488ce6d59e4d8292cd83feee5244c18afb612c4846a8bf1b07759fedbdec9d139ade9f4c82736e17fe8b1af387fe915e196c5705c9f62cf9b93fc13b6ddda0eae3b02e54f1d42d3836a2fb28a9cf03865c2021d9abec30ec7d39563242995dea4f8dbd0405ff359bd860e000000000000207f19065bbf8718c86acbe757b97145e0f59c5b1247a20900000000000000000006bf07b099dbfce582ea5ef309678481e688912cc2f8fe24cc521df200bc0d800ab0315d9b0d1f175dacb617`
    ]

    const superblockR0Headers = [ superblock1Headers[0], superblock1Headers[1] ]; // this superblock should be semi-approved and then rejected
    const superblockR1Headers = [ superblock1Headers[2] ]; // this superblock should also be semi-approved and then rejected

    const superblockR0Hashes = superblockR0Headers.map(utils.calcBlockSha256Hash);
    const superblockR1Hashes = superblockR1Headers.map(utils.calcBlockSha256Hash);

    const superblock0 = utils.makeSuperblock(superblock0Headers, initParentId, 2);
    const superblock1 = utils.makeSuperblock(superblock1Headers, superblock0.superblockHash, 8);
    const superblock2 = utils.makeSuperblock(superblock2Headers, superblock1.superblockHash, 14);
    const superblock3 = utils.makeSuperblock(superblock3Headers, superblock2.superblockHash, 20);
    const superblock4 = utils.makeSuperblock(superblock4Headers, superblock3.superblockHash, 26);

    const superblockR0 = utils.makeSuperblock(superblockR0Headers, superblock0.superblockHash, 4);
    const superblockR1 = utils.makeSuperblock(superblockR1Headers, superblockR0.superblockHash, 6);

    describe('Propose superblocks and reject fork', () => {
        let superblock0Id;
        let superblock1Id;
        let superblock2Id;
        let superblock3Id;
        let superblockR0Id;
        let superblockR1Id;
        let session1;

        before(async () => {
            ({
                superblocks,
                claimManager,
                battleManager,
            } = await utils.initSuperblockChain({
                network: utils.SYSCOIN_REGTEST,
                params: utils.SUPERBLOCK_OPTIONS_LOCAL,
                genesisSuperblock: superblock0,
                from: owner,
            }));

            //FIXME: ganache-cli creates the same transaction hash if two account send the same amount
            await claimManager.methods.makeDeposit().send({ value: utils.DEPOSITS.MIN_REWARD, from: submitter, gas: 300000 });
            await claimManager.methods.makeDeposit().send({ value: utils.DEPOSITS.MIN_REWARD, from: challenger, gas: 300000 });
        });

        it('Initialized', async () => {
            superblock0Id = superblock0.superblockHash;
            const best = await superblocks.methods.getBestSuperblock().call();
            assert.equal(superblock0Id, best, 'Best superblock should match');
        });

        // Propose initial superblock
        it('Propose superblock 1', async () => {
            const result = await claimManager.methods.proposeSuperblock(
                superblock1.merkleRoot,
                superblock1.timestamp,
                superblock1.mtpTimestamp,
                superblock1.lastHash,
                superblock1.lastBits,
                superblock1.parentId).send({ from: submitter, gas: 2100000 });
            assert.ok(result.events.SuperblockClaimCreated, 'New superblock proposed');
            superblock1Id = result.events.SuperblockClaimCreated.returnValues.superblockHash;
        });
        it('Re-Propose superblock 1 bad', async () => {
            await claimManager.methods.makeDeposit().send({ value: utils.DEPOSITS.MIN_REWARD, from: submitter, gas: 300000 });
            // try to propose before timeout as submitter
            await truffleAssert.reverts(claimManager.methods.proposeSuperblock(
                superblock1.merkleRoot,
                superblock1.timestamp,
                superblock1.mtpTimestamp,
                superblock1.lastHash,
                superblock1.lastBits,
                superblock1.parentId).send({ from: submitter, gas: 2100000 }));
           
            // try to propose before timeout as challenger       
            await claimManager.methods.makeDeposit().send({ value: utils.DEPOSITS.MIN_REWARD, from: challenger, gas: 300000 });
            await truffleAssert.reverts(claimManager.methods.proposeSuperblock(
                superblock1.merkleRoot,
                superblock1.timestamp,
                superblock1.mtpTimestamp,
                superblock1.lastHash,
                superblock1.lastBits,
                superblock1.parentId).send({ from: challenger, gas: 2100000 }));
            

        });
        it('Confirm superblock 1', async () => {
            await utils.blockchainTimeoutSeconds(2*utils.SUPERBLOCK_OPTIONS_LOCAL.TIMEOUT);
            const result = await claimManager.methods.checkClaimFinished(superblock1Id).send({ from: submitter, gas: 300000 });
            assert.ok(result.events.SuperblockClaimSuccessful, 'Superblock challenged');
            const best = await superblocks.methods.getBestSuperblock().call();
            assert.equal(superblock1Id, best, 'Best superblock should match');
        });
        it('Propose superblock 1 bad 2', async () => {
            await claimManager.methods.makeDeposit().send({ value: utils.DEPOSITS.MIN_REWARD, from: submitter, gas: 300000 });
            await truffleAssert.reverts(claimManager.methods.proposeSuperblock(
                superblock1.merkleRoot,
                superblock1.timestamp,
                superblock1.mtpTimestamp,
                superblock1.lastHash,
                superblock1.lastBits,
                superblock1.parentId).send({ from: submitter, gas: 2100000 }));
           
            await claimManager.methods.makeDeposit().send({ value: utils.DEPOSITS.MIN_REWARD, from: challenger, gas: 300000 });

            await truffleAssert.reverts(claimManager.methods.proposeSuperblock(
                superblock1.merkleRoot,
                superblock1.timestamp,
                superblock1.mtpTimestamp,
                superblock1.lastHash,
                superblock1.lastBits,
                superblock1.parentId).send({ from: challenger, gas: 2100000 }));

        });
        it('Claim does not exist', async () => {
            const result = await claimManager.methods.rejectClaim(superblockR0.superblockHash).send({ from: submitter, gas: 300000 });
            assert.ok(result.events.ErrorClaim, 'Claim has not been made');
        });

        // Propose an alternate superblock
        it('Propose fork', async () => {
            const result = await claimManager.methods.proposeSuperblock(
                superblockR0.merkleRoot,
                superblockR0.timestamp,
                superblockR0.mtpTimestamp,
                superblockR0.lastHash,
                superblockR0.lastBits,
                superblockR0.parentId).send({ from: submitter, gas: 2100000 });
            assert.ok(result.events.SuperblockClaimCreated, 'New superblock proposed');
            superblockR0Id = result.events.SuperblockClaimCreated.returnValues.superblockHash;
        });

        it('Missing confirmations after one superblock', async () => {
            const result = await claimManager.methods.rejectClaim(superblockR0Id).send({ from: submitter, gas: 300000 });
            assert.ok(result.events.ErrorClaim, 'Error claim not raised despite missing confirmations');
        });

        // Propose two more superblocks
        it('Propose superblock 2', async () => {
            await claimManager.methods.makeDeposit().send({ value: utils.DEPOSITS.MIN_REWARD, from: submitter, gas: 300000 });
            const result = await claimManager.methods.proposeSuperblock(
                superblock2.merkleRoot,
                superblock2.timestamp,
                superblock2.mtpTimestamp,
                superblock2.lastHash,
                superblock2.lastBits,
                superblock2.parentId).send({ from: submitter, gas: 2100000 });
            assert.ok(result.events.SuperblockClaimCreated, 'New superblock proposed');
            superblock2Id = result.events.SuperblockClaimCreated.returnValues.superblockHash;
        });

        it('Confirm superblock 2', async () => {
            await utils.blockchainTimeoutSeconds(2*utils.SUPERBLOCK_OPTIONS_LOCAL.TIMEOUT);
            const result = await claimManager.methods.checkClaimFinished(superblock2Id).send({ from: submitter, gas: 300000 });
            assert.ok(result.events.SuperblockClaimSuccessful, 'Superblock challenged');
            const best = await superblocks.methods.getBestSuperblock().call();
            assert.equal(superblock2Id, best, 'Best superblock should match');
        });

        it('Missing confirmations after two superblocks', async () => {
            const result = await claimManager.methods.rejectClaim(superblockR0Id).send({ from: submitter, gas: 300000 });
            assert.ok(result.events.ErrorClaim, 'Error claim not raised despite missing confirmations');
        });

        it('Propose superblock 3', async () => {
            const result = await claimManager.methods.proposeSuperblock(
                superblock3.merkleRoot,
                superblock3.timestamp,
                superblock3.mtpTimestamp,
                superblock3.lastHash,
                superblock3.lastBits,
                superblock3.parentId).send({ from: submitter, gas: 2100000 });
            assert.ok(result.events.SuperblockClaimCreated, 'New superblock proposed');
            superblock3Id = result.events.SuperblockClaimCreated.returnValues.superblockHash;
        });

        it('Confirm superblock 3', async () => {
            await utils.blockchainTimeoutSeconds(2*utils.SUPERBLOCK_OPTIONS_LOCAL.TIMEOUT);
            const result = await claimManager.methods.checkClaimFinished(superblock3Id).send({ from: submitter, gas: 300000 });
            assert.ok(result.events.SuperblockClaimSuccessful, 'Superblock challenged');
            const best = await superblocks.methods.getBestSuperblock().call();
            assert.equal(superblock3Id, best, 'Best superblock should match');
        });

        it('Propose superblock 4', async () => {
            const result = await claimManager.methods.proposeSuperblock(
                superblock4.merkleRoot,
                superblock4.timestamp,
                superblock4.mtpTimestamp,
                superblock4.lastHash,
                superblock4.lastBits,
                superblock4.parentId).send({ from: submitter, gas: 2100000 });
            assert.ok(result.events.SuperblockClaimCreated, 'New superblock proposed');
            superblock4Id = result.events.SuperblockClaimCreated.returnValues.superblockHash;
        });

        it('Confirm superblock 4', async () => {
            await utils.blockchainTimeoutSeconds(2*utils.SUPERBLOCK_OPTIONS_LOCAL.TIMEOUT);
            const result = await claimManager.methods.checkClaimFinished(superblock4Id).send({ from: submitter, gas: 300000 });
            assert.ok(result.events.SuperblockClaimSuccessful, 'Superblock challenged');
            const best = await superblocks.methods.getBestSuperblock().call();
            assert.equal(superblock4Id, best, 'Best superblock should match');
        });

        // This should raise an error because the superblock is neither InBattle nor SemiApproved
        it('Try to reject without challenges', async () => {
            const result = await claimManager.methods.rejectClaim(superblockR0Id).send({from: submitter, gas: 300000});
            assert.ok(result.events.ErrorClaim, 'Error claim not raised despite bad status');
        });

        // Challenge fork
        it('Challenge fork', async () => {
            const result = await claimManager.methods.challengeSuperblock(superblockR0Id).send({ from: challenger, gas: 2100000 });
            assert.ok(result.events.SuperblockClaimChallenged, 'Superblock challenged');
            assert.equal(superblockR0Id, result.events.SuperblockClaimChallenged.returnValues.superblockHash);
            assert.ok(result.events.VerificationGameStarted, 'Battle started');
            session1 = result.events.VerificationGameStarted.returnValues.sessionId;
        });

        // Challenge multiple
        it('Challenge multiple', async () => {
            // try to do multiple challenges from same challenger should reject
            const result = await claimManager.methods.challengeSuperblock(superblockR0Id).send({ from: challenger, gas: 2100000 });   
            assert.ok(result.events.ErrorClaim, 'Error claim cannot challenge multiple times as same challenger');
        });

        // Don't reject claim if it's undecided
        it('Try to reject undecided claim', async () => {
            const result = await claimManager.methods.rejectClaim(superblockR0Id).send({ from: submitter, gas: 300000 });
            assert.ok(result.events.ErrorClaim, 'Error claim not raised despite undecided claim');
        });

        it('verify headers', async () => {
            result = await battleManager.methods.respondBlockHeaders(session1, Buffer.from(superblockR0Headers.join(""), 'hex'), superblockR0Headers.length).send({ from: submitter, gas: 5000000 });
            assert.ok(result.events.ChallengerConvicted, 'Challenger not convicted despite fork being initially valid');
        });

        // Call rejectClaim on superblocks that aren't semi approved
        it('Try to reject unconfirmed superblock', async () => {
            result = await claimManager.methods.rejectClaim(superblockR0Id).send({ from: submitter, gas: 300000 });
            assert.ok(result.events.ErrorClaim, 'Error claim not raised despite bad superblock status');
        });

        it('Confirm forked superblock', async () => {
            await utils.blockchainTimeoutSeconds(2*utils.SUPERBLOCK_OPTIONS_LOCAL.TIMEOUT);
            result = await claimManager.methods.checkClaimFinished(superblockR0Id).send({ from: challenger, gas: 300000 });
            assert.ok(result.events.SuperblockClaimPending, 'Superblock challenged');
            const status = await superblocks.methods.getSuperblockStatus(superblockR0Id).call();
            assert.equal(status, SEMI_APPROVED, 'Superblock was not semi-approved');
        });

        // Propose another superblock in the fork
        it('Propose superblock R1', async () => {
            const result = await claimManager.methods.proposeSuperblock(
                superblockR1.merkleRoot,
                superblockR1.timestamp,
                superblockR1.mtpTimestamp,
                superblockR1.lastHash,
                superblockR1.lastBits,
                superblockR1.parentId).send({ from: submitter, gas: 2100000 });
            assert.equal(result.events.SuperblockClaimCreated.event, 'SuperblockClaimCreated', 'New superblock proposed');
            superblockR1Id = result.events.SuperblockClaimCreated.returnValues.superblockHash;
        });

        it('Confirm superblock R1', async () => {
            await utils.blockchainTimeoutSeconds(2*utils.SUPERBLOCK_OPTIONS_LOCAL.TIMEOUT);
            const result = await claimManager.methods.checkClaimFinished(superblockR1Id).send({ from: submitter, gas: 300000 });
            assert.ok(result.events.SuperblockClaimPending, 'Superblock challenged');
            const status = await superblocks.methods.getSuperblockStatus(superblockR1Id).call();
            assert.equal(status, SEMI_APPROVED, 'Superblock was not semi-approved');
        });

        // Invalidate superblock and reject claim
        it('Reject superblock R0', async () => {
            const result = await claimManager.methods.rejectClaim(superblockR0Id).send({ from: submitter, gas: 300000 });
            assert.ok(result.events.SuperblockClaimFailed, 'SuperblockClaimFailed event not found');
            assert.ok(result.events.DepositUnbonded, 'DepositUnbonded event not found');
            const status = await superblocks.methods.getSuperblockStatus(superblockR0Id).call();
            assert.equal(status, INVALID, 'Superblock was not invalidated');
        });

        it('Reject superblock R1', async () => {
            const result = await claimManager.methods.rejectClaim(superblockR1Id).send({ from: submitter, gas: 300000 });
            assert.ok(result.events.SuperblockClaimFailed, 'SuperblockClaimFailed event not found');
            const status = await superblocks.methods.getSuperblockStatus(superblockR1Id).call();
            assert.equal(status, INVALID, 'Superblock was not invalidated');
        });
    });
});
