const { TestHelper } = require('@openzeppelin/cli');
const { Contracts, ZWeb3 } = require('@openzeppelin/upgrades');

/* Initialize OpenZeppelin's Web3 provider. */
ZWeb3.initialize(web3.currentProvider);

const SyscoinSuperblocks = Contracts.getFromLocal('SyscoinSuperblocks');
const utils = require('./utils');


contract('SyscoinSuperblocks2', function(accounts) {
  const claimManager = accounts[1];
  const proxyAdmin = accounts[9];
  const erc20Manager = accounts[3];
  const user = accounts[2];
  let superblocks;
  beforeEach(async () => {
    this.project = await TestHelper({from: proxyAdmin});
    superblocks = await this.project.createProxy(SyscoinSuperblocks, {
      initMethod: 'init',
      initArgs: [erc20Manager, claimManager]
    });
  });
  const headers = [
    `00010030bdddd1f271065781e185c91e7623b0fad7577eb6ed48f4a6c084e7cd2b17bd77a954d9e9ce07055e9bf22a1dd44a9ab10bd8acc3d2e1487b3c66395c4eb775360348e75b52d206180000000001000000010000000000000000000000000000000000000000000000000000000000000000ffffffff6303af6208202f5669614254432f4d696e65642062792074616b61666a7a687339313430302f2cfabe6d6d8a376cac09279c1a3319b60b544138421fc3929a9b0950b6c51b8ebc0d9921b3040000000000000010b230ea034d65f67fedf1787aab280100ffffffff026c354a4b000000001976a914536ffa992491508dca0354e52f32a3a7a679a53a88ac0000000000000000266a24aa21a9ed26c2eacb8d3980e6d23a5aacbb09586b9de87c41239ca98697ac49a186951e2c00000000f22af76b72948efe5c2d5c50e9e2c453ce0280a787b0f30100000000000000000c0f158fdb86dea3b53f33c01364e55f6a73e1af9e58bb7c53af140a742c74d3be6aaee3e2df7f7741be946a434a866b0f1e5d028c3f5d996505710a7988447e478cf390257229007bc87895e0dd8587ff6dcc14ecffa64dcdc268d5c43ce9607d5bee975203a6594aecbaec0f094d8ff60b5a14fa3142903cdbb49ac39588b109b33f52d5d0db227fcf2dc2011f7e9825879fe20b2dc4e657c694a9c69691f8d8c977ed914778ac14d596b96d4eaf3f5cdcb6c408fb8c545c14091cc498772a6c16c582d56dfde16fc92838656e8feec2e20c806e25df8f205892d7f1c0635af97f3c6cdfd19e9e504abdf868697420864aa045c2dd265223d2164e253395226838a9630fc6e73ca2f8ae980d620448fa665567c25a08f66625af98e360c68ad42dfe9ff104246c1b4cc627db03af62a65fec2b5ba4bfc9be4f57c19e7710ab9aa1733d8ed777f3d334506c19c4887b78708e346a7f1da994220c7dfa501f5d0094e3a39d3dfab77b3dcda33e9f93a798fa51484e663080a8258d0afa16599afa00000000022f6fc81881813616333d1abb9b177166d02b206ba44f211e581fca95ed5211b9c9c22d0cab8999b06f64cfab27630008e872a07665c2da9d6884581e2f44ea6c0200000000000020be2bd5b042f797840282c36871b2d56d923747c36fd70e000000000000000000ec1e9a5aabb4b0924ce239c9a171e459d6e0ea0f7a5a6c9ed20aee4bdbb8fc933048e75b922d271734dc86d5`,
    `0001003017bdc440e07fd5ae01bb2ff10debc483ab85ad02ac88e65f413840aedf8fcdbdedc1435ccbeaa2fae080d3e1dfa1b73d3da1fdd06132c6b258c575eba7314d234648e75bd5ef06180000000001000000010000000000000000000000000000000000000000000000000000000000000000ffffffff4b03b06208082f5669614254432f2cfabe6d6d70c6e6fbbeaa73fa5a3f7cf0e046f44692870d8c7af0f049cd6b41bc34b04a91040000000000000010b430e8038a649b415fc5ab8c2a000000ffffffff01807c814a000000001976a914536ffa992491508dca0354e52f32a3a7a679a53a88ac00000000100987dbd822a69bf22a7ce57b7cae82a17784b76229f40400000000000000000000000000022f6fc81881813616333d1abb9b177166d02b206ba44f211e581fca95ed5211b9c9c22d0cab8999b06f64cfab27630008e872a07665c2da9d6884581e2f44ea6c0200000000000020ea9d851c6acd55ac9b1b8ddc8cb383f981edd5db28e01500000000000000000002dfdafba9a66d74e45ff4af045f426b2a4bd83050ff4d2cbaf415056df6fdec6448e75b922d2717a469da88`,
    `000100301e0c74e47b56541c05128090eb9aa326f1921b1c673cc0417a1a95e671e609a8179483e327e735a6a63d72831de78088c8830fe46aeec915a3103ca5601bd4266448e75bf28206180000000001000000010000000000000000000000000000000000000000000000000000000000000000ffffffff6403b062082cfabe6d6d32a99432ad7293104b6517d69232cc3eab6ab9dc4e35982a942c2b3dda07827608000000f09f909f000e4d696e656420627920626169796c000000000000000000000000000000000000000000000000000000000000000000000034afaaea034c88ad4a000000001976a914c825a1ecf2a6830c4401620c3a16f1995057c2ab88ac00000000000000002f6a24aa21a9edc68487fa8649197f918b49ea2da4d99752f893964c63301e6f8ba0bfea32283c08000000000000000000000000000000002c6a4c2952534b424c4f434b3a57320d9f7ea797df8947211a1eaf8166723a74ac59c6235d70e13a75f504c0acd1f96d41ab8856e57807730bcb9784da03b1052dd4133fe5d0941c0300000000000000000b67eb7081f19b98f5fe8a5da48d4eefbb5fe0f2a6dc01ccc1c0c21da823de6e003f1ed2fd7bb4d56444b5d8b9b053b5d525f50d21beacd651dadfe64b47d33dac0b42477a399373c5f14629effbc9897d3ead771b1d6c25a3410298d27c5b6d2249a5730ebfd3dd6e02e6489d5ee1e22e8e1eac40ad902d3e6308d6acca348dc23d43eb50ab8361f627ae55e6d5b0b27970391b4bae00bb9c3f2500c5628a204e87a98ce838fe7907ace6a0449d2c3edd8ae81b562fd65ce3211c30388b48042b45d7e5323f42855a82683e1c6abb6bac835df90ec9e6d9f883a50bb5aa1dd5f8efbd131b4f41cc4328319b1ca32e8d1c20f7fa20a1cb4d83be9cadabb5f30a35dc8cbaa04bc721ca85dafd986918fe8505db873e6e114e0f293591c0f7265cc72f7ae390e076311eda4b02418452bc7b5c9e9f01de05ba0f25454d2cb606c3519cc0e6339473e48df47ceadaf32eeff953017fb40dbeecec5f3789cd00a18d78000000000359aab394a33103dd85ed18dc99c53c0c77679fb6374311c06aff7e6598b695f177032806e674b9cc358f8a8f78759a4ca893c2c5500ccf28ebff54a47b40c2e5a056f60418e33c63b3b3e36b8184dcc8d354ffbbe00d29aabc74f65d9f9678190600000000000020ea9d851c6acd55ac9b1b8ddc8cb383f981edd5db28e015000000000000000000cdf574029bf1b8cef6996b5a8eea0625206023a0b6937505f553727866b4145fa148e75b922d2717978081a9`,
    `00010030ce2382e93c6df41a9378fa7dc841e7f8b9b46268f98afb5de5cdc1d9bcea3228395a8b90051ca6ceb5b5a7642e69a39f4d68ecbc34a7a6df6d6b724859f2d0e1a848e75b2b5a06180000000001000000010000000000000000000000000000000000000000000000000000000000000000ffffffff6403b062082cfabe6d6d8efa6cdcaf1478eeca38be416a4067a149fa2aa764ac12d30dbf8e4a9ff582a108000000f09f909f000e4d696e656420627920626a783034000000000000000000000000000000000000000000000000000000000000000000000038c906000297d5bc4a000000001976a914c825a1ecf2a6830c4401620c3a16f1995057c2ab88ac00000000000000002f6a24aa21a9ed2abe001bd2a8efe953639d29757e0b2105612fb179a1dfda1adbab5a390726b50800000000000000004976ab3aa1834bdc92d54a38cbe7098d8bd7bb53c1fabf0780e4e30500000000000000000b37a5cf72ed34bdf3a620ca1920389ea90b6144935fe5ee1dbe456a45b2b5744ca1f16f79cb9e5b6179fbac51b74fbaea6075166dbe0404330181954f4f4e680de2202aeb63bff729262e100193556f6b9e950098bfba6c5780cb117811a3de374cc715dd1cccfdd6f34da07e82204b24d82486fbfa5729bcc26d10a7dfb9636c89b0f1ffb3b7c804c1ed557a71ffe1a6dfdc30c14e22e1793755064b58377658e99043b67b2a11b7243a61a5e14ee3cac0eea5c49034d2f1de0a6015fb4c72de1121b200fb4fc52e2240000758bd61a885346b8af4ce90cb233777cb6c905c87908038f140398a07c7e3e2c4c9184930cc300b2e4c22f2c6d8fd6ad2a5a52e883475cc0f58553e90590c74b4b5d0139b9ff1f8bb0d73ce5cef137b1d95b94b74e95d30f8f23b99e7e10364c382d8036bd522f2bab8d8add0263c84f2a98c7af84a5679fd8bebc76eb88b0743a49f140f7d4cd3e58b5ccefdcab18b1c13964a2d0000000003070000000000000000000000000000000000000000000000000000000000000077032806e674b9cc358f8a8f78759a4ca893c2c5500ccf28ebff54a47b40c2e5a056f60418e33c63b3b3e36b8184dcc8d354ffbbe00d29aabc74f65d9f9678190600000000000020ea9d851c6acd55ac9b1b8ddc8cb383f981edd5db28e0150000000000000000006dc55bc890b3ee11f976c985287b3235551d4ed7605dce91c4086c6c00a7578ac948e75b922d271703812ec3`,
    `000100302d2654a165d4bfd5df36f440c510ecaf19aa6234fc8f5097d17565638ab65c3416b73f1926c611a0a5c4c1e37864e22a8cfe481c87fa4cb2086f26099bd2f056cf48e75b656f06180000000002000000010000000000000000000000000000000000000000000000000000000000000000ffffffff4f03b0620804e148e75b2f44504f4f4c2e544f502f484e2ffabe6d6d27cde11e02e87a967064b7eb21b41b42e66c9d5650b0a4b53bd357925a05072501000000000000001774c7447064010000000000ffffffff024ba9c04a000000001976a91464d5c995b8897f8af38010ac654b78e6cc937ec288ac0000000000000000266a24aa21a9ed487aed9ce1e4550b6b14395bf03b4fdb875f16d210da7c569fec348bbaafbf5f000000000000000000000000045a709f73dd6b539cb5c911d359a6d997cda83561337b950b37a5cf72ed34bdf3a620ca1920389ea90b6144935fe5ee1dbe456a45b2b5744ca1f16f79cb9e5b6179fbac51b74fbaea6075166dbe0404330181954f4f4e680de2202aeb63bff729262e100193556f6b9e950098bfba6c5780cb117811a3de374cc715dd1cccfdd6f34da07e82204b24d82486fbfa5729bcc26d10a7dfb9636c3b9d13dbfbe65c257a7c41b13be3ac5b1a9c2a903f8b9e9b684149c1c80c7413fd30dddcc1f05bd92535259e8d8147c3ebbff02e0fce45ce86024466b05c57be611be9e14f7a8c0087e7987e431a3e58ab8e726578c2e9dbc0cca191f6c583821f280bd6a3e215b64550fe9418b1ed61516d370ed560c26698e9b66cfd3d29cbef0359f46bb0bf41ad73a05ab575b11af27df6ae33f275997d17959d41715afd339a89b5553b989cb9cccfa9b5d0ec546919103c7f7bf898c203572e5e98ee9e07ae9824dfdc630c6c592e594302b240c42e1e0380179e40cf4648438901ed8500000000000000000000000020ea9d851c6acd55ac9b1b8ddc8cb383f981edd5db28e0150000000000000000001e92555239bbb8e0049b88078a7ce000c2dfc36d540971d285c5b8592aaa1471e048e75b922d2717f36c0373`,
  ];
  const hashes = headers.map(utils.calcBlockSha256Hash);
  const initParentId = '0x0000000000000000000000000000000000000000000000000000000000000000';
  const genesisSuperblock = utils.makeSuperblock(headers, initParentId);
  it('Initialize', async () => {
    let result;
    result = await superblocks.methods.initialize(
      genesisSuperblock.merkleRoot,
      genesisSuperblock.timestamp,
      genesisSuperblock.mtpTimestamp,
      genesisSuperblock.lastHash,
      genesisSuperblock.lastBits,
      genesisSuperblock.parentId).send({ from: user, gas: 300000 });

    const best = await superblocks.methods.getBestSuperblock().call();
    assert.equal(best, genesisSuperblock.superblockHash, 'Best superblock updated');

    const locator = await superblocks.methods.getSuperblockLocator().call();
    assert.equal(locator.length, 9, 'Superblock locator');
    assert.equal(locator[0], genesisSuperblock.superblockHash, 'Superblock locator 0');
    assert.equal(locator[1], genesisSuperblock.superblockHash, 'Superblock locator 1');
    assert.equal(locator[2], genesisSuperblock.superblockHash, 'Superblock locator 2');
    assert.equal(locator[8], genesisSuperblock.superblockHash, 'Superblock locator 8');

    const height = await superblocks.methods.getSuperblockHeight(best).call();
    assert.equal(height, 1, 'Superblock height');

    const superblock = await superblocks.methods.getSuperblock(best).call();


    // 2 keys per returned var
    assert.equal(Object.keys(superblock).length, 18, 'Have enough data');
    assert.equal(superblock[0], genesisSuperblock.merkleRoot, 'Merkle root');
    assert.equal(superblock[1], genesisSuperblock.timestamp, 'Last block timestamp');
    assert.equal(superblock[2], genesisSuperblock.mtpTimestamp, 'Last block median timestamp');
    assert.equal(superblock[3], genesisSuperblock.lastHash, 'Last block hash');
    assert.equal(superblock[4], genesisSuperblock.lastBits, 'Last block difficulty bits');
    assert.equal(superblock[5], genesisSuperblock.parentId, 'Parent superblock');
    assert.equal(superblock[6], user, 'Submitter');
    assert.equal(superblock[7].toString(10), 4, 'Superblock status'); // Approved
    assert.equal(superblock[8], 1, 'height');

  });
});
